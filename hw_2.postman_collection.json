{
	"info": {
		"_postman_id": "9265c434-68b8-44a9-8e40-348eb35200da",
		"name": "hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// . Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"    var great = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"var reqBody = request.data ;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"User start_qa_salary\", function () {\r",
							"    pm.expect(great).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"User qa_salary_after_6_months\", function () {\r",
							"pm.expect(great).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"heard qa_salary_after_12_months\", function () {\r",
							"    pm.expect(great).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"heard qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(great).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"heard qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(great).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"heard person\", function () {\r",
							"    pm.expect(great).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"User start_qa_salary\", function () {\r",
							"     pm.expect(request.data.salary).to.eql(reqBody.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"User qa_salary_after_6_months\", function () {\r",
							"     pm.expect(request.data.salary*2).to.eql(reqBody.salary*2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"User  qa_salary_after_12_months\", function () {\r",
							"     pm.expect(request.data.salary*2.7).to.eql(reqBody.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"User qa_salart_after_1.5_year\", function () {\r",
							"     pm.expect(request.data.salary*3.3).to.eql(reqBody.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"User qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(request.data.salary*3.8).to.eql(reqBody.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметре person, 1-й элемент из u_name равен salary из request\", function  () {\r",
							"    pm.expect(great.person.u_name[1]).to.eql(+reqBody.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request (age забрать из request.)\", function  () {\r",
							"    pm.expect(great.person.u_age).to.eql(+reqBody.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request  \", function () {\r",
							"    pm.expect(great.person.u_salary_5_years).to.eql(+reqBody.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var arr_len = Object.keys(great.person).length;\r",
							"console.log(arr_len);\r",
							"for(var i = 0; i < arr_len; i++) {\r",
							"    console.log(Object.keys(great.person)[i]);\r",
							"};\r",
							"\r",
							"// for (i in great.person) {\r",
							"//     console.log(\"keys =\" + i, typeof(i));\r",
							"//     if (typeof(great.person[i]) == 'object'){\r",
							"//         for(j in great.person[i]) {\r",
							"\r",
							"// console.log(\"value =\" + great.person[i][j] typeof (great.person[i][j]))  \r",
							"//         }          "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "easy",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}