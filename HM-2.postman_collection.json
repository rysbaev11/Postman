{
	"info": {
		"_postman_id": "57981475-8bca-49f0-abde-a1243889757f",
		"name": "HM-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"var reqBody = request.data;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"beka\");\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql ('27');\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"User salary s request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql +90000;\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family) \r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(jsonData. family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(jsonData. family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\" name is Luky\", function ()  {\r",
							"    pm.expect(jsonData. family.pets.dog.name).to.be.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\" Age is 4\", function () {\r",
							"    pm.expect(jsonData. family.pets.dog.age).to.be.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=beka&age=27&salary=90000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "beka"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "90000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "beka",
							"disabled": true
						},
						{
							"key": "age",
							"value": "22",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"\r",
							"console.log (\"TOKEN =\" + resp_token)\r",
							"\r",
							"\r",
							"pm.environment.set(\"token\",\r",
							"     resp_token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "omurbek",
							"type": "default"
						},
						{
							"key": "password",
							"value": "21342ed",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "20000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "omurbek",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var jsonData = pm.response.json();\r",
							" \r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"   var json_resp = JSON.parse(responseBody);\r",
							"   pm.expect(jsonData.name).to.eql (\"omurbek\")\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"pm.expect(jsonData.age).to.eql +27;\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"User salary\", function () {\r",
							"pm.expect(jsonData.salary).to.eql + 9000;\r",
							"});\r",
							"//7. Спарсить request.\r",
							"\r",
							"var reqBody = request.data;\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"User name c request\", function() {\r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"user age c request\", function() {\r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age) ;\r",
							"});   \r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary c reguest\", function() {\r",
							"    pm.expect(jsonData.salary).to.eql+90000\r",
							"    });   \r",
							"//11. Вывести в консоль параметр family из response.\r",
							"var json_resp = JSON.parse(responseBody);\r",
							"var family = json_resp.family\r",
							"console.log(family) \r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect (jsonData.family.u_salary_1_5_year).to.eql(reqBody.salary*4);\r",
							"});  \r",
							"console.log(jsonData.family.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "omurbek",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "90000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"    var jsonData = pm.response.json();\r",
							"   \r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"pm.test(\"check name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"omurbek\");\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"User age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(27);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_1 = jsonData.salary[0]\r",
							"console.log(salary_1);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_2 = jsonData.salary[1]\r",
							"console.log(salary_2);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_3 = jsonData.salary[2]\r",
							"console.log(salary_3);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary-0\",function () {\r",
							"    pm.expect(salary_1).to.eql(+req.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary-1\", function () {\r",
							"    pm.expect(+salary_2).to.eql(req.salary*2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary-2\", function () {\r",
							"    pm.expect(+salary_3).to.eql(req.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var json_resp = JSON.parse(responseBody)\r",
							"var salary = json_resp.salary\r",
							"console.log(salary);\r",
							"\r",
							"for (var i=0; i < salary.length; i++){\r",
							"    console.log(salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=omurbek&age=27&salary=9000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "omurbek"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "9000"
						}
					]
				}
			},
			"response": []
		}
	]
}